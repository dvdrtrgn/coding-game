var inputs = readline().split(' ');
var N = parseInt(inputs[0]); // number of nodes , including gateways
var L = parseInt(inputs[1]); // the number of links
var E = parseInt(inputs[2]); // the number of exit gateways
printErr(N, 'nodes', L, 'links', E, 'exits');

var links = [];
var exits = [];

for (var i = 0; i < L; i++) {
  links.push(readline().split(' ').map(Number));
}
for (var i = 0; i < E; i++) {
  exits.push(parseInt(readline())); // the index of a gateway node
}
printErr('exits', exits);
links.map(x => printErr(x));

// var links = [ [1,3], [2,3], [0,1], [0,2] ];

var has = (a, b, c) => a.includes(b, c);

function indexFilter1(arr, val) {
  return arr.map((v, o, a) => {
    return has(v, val) ? {
      o: o,
      v: v
    } : '';
  }).filter(x => x);
}
function indexFilter(arr, val) {
  return arr.map((v, o, a) => {
    return has(v, val) ? v: '';
  });
}
function match(a, b) {
  return a.filter((v,o,a) => v && b[o] === v);
}

// game loop
while (true) {
  var idx, rez;
  var skyn = +readline();
  var exit = Number(exits[0]);
  var skynIDs = indexFilter(links, skyn);
  var exitIDs = indexFilter(links, exit);
  var bothIDs = match(skynIDs, exitIDs);
  printErr('bothIDs', bothIDs);

  rez = (bothIDs[0] || links.splice(idx || 0, 1)[0]).join(' ');
  printErr('rez', rez);
  print(rez);
}
